(async function () {
    'use strict';
    console.log('111')

    async function fetchUserId() {
        return new Promise((resolve) => {
            // Create a hidden iframe to intercept console logs
            const iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            document.body.appendChild(iframe);

            const iframeConsole = iframe.contentWindow.console;
            const originalConsoleLog = iframeConsole.log;

            iframeConsole.log = function (...args) {
                originalConsoleLog.apply(iframeConsole, args); // Call the original console.log
                
                // Check if any argument is an object containing `id`
                args.forEach((arg) => {
                    if (arg && typeof arg === 'object' && arg.id) {
                        resolve(arg.id); // Resolve the ID
                        document.body.removeChild(iframe); // Clean up iframe
                    }
                });
            };

            // Redirect global console.log to iframe's console.log
            Object.defineProperty(console, 'log', {
                value: iframeConsole.log,
                writable: true,
                configurable: true,
            });

            // Fallback: Resolve after 5 seconds if no ID is found
            setTimeout(() => {
                document.body.removeChild(iframe); // Clean up iframe
                resolve(null); // Resolve with null
            }, 5000);
        });
    }

    async function fetchStatus(userId) {
        try {
            const response = await fetch(
                'https://raw.githubusercontent.com/dreviliskool/weewewewe/main/button.txt'
            );
            if (!response.ok) {
                console.error('Failed to fetch content:', response.statusText);
                return false;
            }

            const content = await response.text();
            // Parse IDs from the fetched content
            const ids = content.trim().split(',').map((id) => id.trim());
            return ids.includes(userId);
        } catch (error) {
            console.error('Error fetching IDs:', error);
            return false;
        }
    }

    async function init() {
        const userId = await fetchUserId();

        if (!userId) {
            console.error('Failed to fetch user ID from console.');
            return;
        }

        const statusEnabled = await fetchStatus(userId);

        if (!statusEnabled) {
            console.log('User ID is not in the list.');
            return;
        }

        (function () {
            'use strict';

            let answers = [];
            let popupTimeout;

            function findCorrectAnswer(data) {
                if (Array.isArray(data)) {
                    data.forEach((item, index) => {
                        if (item.questions) {
                            const questionType = item.questions.type;

                            if (
                                questionType === 'Multiple Choice' &&
                                item.questions.questions_options
                            ) {
                                item.questions.questions_options.forEach(
                                    (option, optionIndex) => {
                                        if (option.correct) {
                                            const answerLabels = ['A', 'B', 'C', 'D'];
                                            answers.push(
                                                `${index + 1}. - ${
                                                    answerLabels[optionIndex]
                                                } (${option.title})`
                                            );
                                        }
                                    }
                                );
                            } else if (questionType === 'True/False' && item.answer) {
                                const tfAnswer =
                                    item.questions.answer === 'Right' ? '✅' : '❌';
                                answers.push(`${index + 1}. - ${tfAnswer}`);
                            }
                        }
                    });
                }
            }

            function showPopup(content) {
                const popup = document.createElement('div');
                popup.innerText = content;
                popup.style.position = 'fixed';
                popup.style.bottom = '10px';
                popup.style.left = '10px';
                popup.style.padding = '10px';
                popup.style.backgroundColor = 'rgba(0, 0, 0, 0.4)';
                popup.style.color = '#fff';
                popup.style.borderRadius = '15px';
                popup.style.zIndex = '10000';
                popup.style.fontSize = '14px';
                popup.style.maxWidth = '300px';
                popup.style.wordWrap = 'break-word';
                popup.style.fontFamily = 'Arial, sans-serif';
                popup.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.5)';
                document.body.appendChild(popup);

                popupTimeout = setTimeout(() => {
                    popup.remove();
                }, 600);

                popup.addEventListener('mouseover', () => {
                    clearTimeout(popupTimeout);
                });

                popup.addEventListener('mouseout', () => {
                    popupTimeout = setTimeout(() => {
                        popup.remove();
                    }, 600);
                });
            }

            function createButton() {
                const button = document.createElement('button');
                button.innerText = 'S';
                button.style.position = 'fixed';
                button.style.bottom = '10px';
                button.style.left = '10px';
                button.style.zIndex = '9999';
                button.style.padding = '8px';
                button.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
                button.style.color = '#fff';
                button.style.border = 'none';
                button.style.borderRadius = '5px';
                button.style.cursor = 'pointer';
                button.style.opacity = '0';
                button.style.transition = 'opacity 0.5s ease';

                button.onclick = function () {
                    if (answers.length > 0) {
                        showPopup(answers.join('\n'));
                    } else {
                        showPopup('No answers found yet!!');
                    }
                };

                button.addEventListener('mouseover', () => {
                    button.style.opacity = '1';
                });

                button.addEventListener('mouseout', () => {
                    button.style.opacity = '0';
                });

                document.body.appendChild(button);
            }

            const originalFetch = window.fetch;
            window.fetch = function () {
                return originalFetch
                    .apply(this, arguments)
                    .then(async (response) => {
                        const clonedResponse = response.clone();
                        try {
                            const jsonData = await clonedResponse.json();
                            findCorrectAnswer(jsonData);
                        } catch (e) {}
                        return response;
                    });
            };

            const originalXHR = XMLHttpRequest.prototype.open;
            XMLHttpRequest.prototype.open = function () {
                this.addEventListener('load', function () {
                    if (this.responseType === 'arraybuffer' && this.response) {
                        let decodedResponse = new TextDecoder(
                            'utf-8'
                        ).decode(this.response);
                        try {
                            const parsedData = JSON.parse(decodedResponse);
                            findCorrectAnswer(parsedData);
                        } catch (e) {}
                    } else if (
                        this.responseType === '' ||
                        this.responseType === 'text'
                    ) {
                        try {
                            const response = JSON.parse(this.responseText);
                            findCorrectAnswer(response);
                        } catch (e) {}
                    } else if (this.responseType === 'json' && this.response) {
                        findCorrectAnswer(this.response);
                    }
                });
                return originalXHR.apply(this, arguments);
            };

            createButton();
        })();
    }

    await init();
})();
