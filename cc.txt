(function () {
    'use strict';

    const firebaseConfig = {
        apiKey: "AIzaSyCzfEgRutixv74_ydXBJmu8ImLNDcduoVk",
        authDomain: "hehehaha-dda0e.firebaseapp.com",
        databaseURL: "https://hehehaha-dda0e-default-rtdb.firebaseio.com",
        projectId: "hehehaha-dda0e",
        storageBucket: "hehehaha-dda0e.appspot.com",
        messagingSenderId: "475557136805",
        appId: "1:475557136805:web:463e7fcb0ad8d51f69004c"
    };

    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();

    let scriptEnabled = false;
    let currentMode = 'real';
    let customAnswers = ['Waiting for instructions...'];

    function getUserId() {
        let userId = GM_getValue('scriptUserId');
        if (!userId) {
            userId = 'user-' + Math.random().toString(36).substr(2, 9);
            GM_setValue('scriptUserId', userId);
        }
        return userId;
    }
    const myUserId = getUserId();
    console.log(`[Script Controller] Your ID is: ${myUserId}. Share this with the admin.`);

    const userRef = db.ref('users/' + myUserId);
    userRef.on('value', (snapshot) => {
        const userData = snapshot.val();
        if (userData) {
            scriptEnabled = userData.enabled === true;
            currentMode = userData.mode || 'real';
            customAnswers = (userData.customAnswers && Array.isArray(userData.customAnswers)) ? userData.customAnswers : ['No custom answers set.'];
        } else {
            userRef.set({ nickname: 'New User ' + myUserId.substring(5, 9), enabled: true, mode: 'real', customAnswers: ['Welcome!'] });
        }
        if (document.body) showTempAlert(scriptEnabled ? `Script Updated! Mode: ${currentMode}` : 'Script Disabled by Admin', '#3498db');
    });

    function showTempAlert(message, color = '#333') {
        const el = document.createElement('div');
        el.textContent = message;
        Object.assign(el.style, {
            position: 'fixed', top: '20px', left: '50%', transform: 'translateX(-50%)', backgroundColor: color, color: '#fff',
            padding: '10px 20px', borderRadius: '5px', boxShadow: '0 2px 5px rgba(0,0,0,0.2)', zIndex: '99999', transition: 'opacity 0.5s'
        });
        document.body.appendChild(el);
        setTimeout(() => { el.style.opacity = '0'; setTimeout(() => el.remove(), 500); }, 2000);
    }

    const originalLog = console.log;
    console.log = function (...args) {
        originalLog.apply(console, args);
        const savedId = [10000037, 10014805, 10001066, 10000161, 10000783, 10002839, 10003870];
        if (savedId.some(id => String(args[0]).startsWith(id)) && !window.answerScriptInitialized) {
            if (scriptEnabled) {
                setupAnswerUIAndInterceptors();
                window.answerScriptInitialized = true;
                showTempAlert('Answer helper activated!', '#2ecc71');
            }
        }
    };

    function setupAnswerUIAndInterceptors() {
        let answers = [];
        let popupTimeout;
        const apiToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Ik1hbnNvdXIgTW9oYW1lZCBTYWVlZCBFbGFkYXd5IiwiaWQiOjEwMDAyMzI0LCJyb2xlIjoic3R1ZGVudCIsImNvaG9ydCI6Njc5LCJieV9zdWJqZWN0IjpudWxsLCJncmFkZSI6OTYsImNsYXNzcm9vbSI6MzI4LCJpYXQiOjE3NTc1MzY3NDJ9.rXN1qByEdvA8UDNIRgDqcvGvzZaVvIf24QBdnM3wkss";

        function processQuestionData(data) {
            if (!Array.isArray(data)) return;
            data.forEach(async (item, indexx) => {
                if (!item.id || !item.type) return;
                fetch(`https://blb2024-o5xlbifnea-uc.a.run.app/questions/${item.id}`, {
                    method: "GET",
                    headers: { "accept": "*/*", "content-type": "application/json", "origin": "https://student.nis-blb.com", "referer": "https://student.nis-blb.com/", "token": apiToken, "type": "student" }
                }).then(res => res.json()).then(qdata => {
                    if (qdata.type === "True/False") {
                        const tfAnswer = qdata.answer === "Right" ? "✅ Right" : "❌ Wrong";
                        answers.push(`${indexx + 1}. ${tfAnswer}`);
                    } else if (qdata.type === "Multiple Choice") {
                        const correctOption = (qdata.questions_options || []).find(opt => opt.correct);
                        if (correctOption) {
                            const idx = qdata.questions_options.indexOf(correctOption);
                            const label = ["A", "B", "C", "D", "E", "F", "G"][idx] || `Option ${idx + 1}`;
                            answers.push(`${indexx + 1}. ${label}) ${correctOption.title}`);
                        }
                    }
                }).catch(err => console.log(`.`));
            });
        }

        function showPopup(content) {
            if (popupTimeout) clearTimeout(popupTimeout);
            let existingPopup = document.getElementById('answer-popup');
            if(existingPopup) existingPopup.remove();

            const popup = document.createElement('div');
            popup.id = 'answer-popup';
            popup.innerText = content;
            Object.assign(popup.style, {
                position: 'fixed', bottom: '10px', right: '10px', padding: '10px', backgroundColor: 'rgba(0, 0, 0, 0.6)', backdropFilter: 'blur(5px)',
                color: '#fff', borderRadius: '15px', zIndex: '10000', fontSize: '14px', maxWidth: '300px', wordWrap: 'break-word',
                fontFamily: 'Arial, sans-serif', boxShadow: '0 2px 10px rgba(0,0,0,0.5)', border: '1px solid rgba(255, 255, 255, 0.1)'
            });
            document.body.appendChild(popup);
            popupTimeout = setTimeout(() => { popup.remove(); }, 4000);
            popup.addEventListener('mouseover', () => clearTimeout(popupTimeout));
            popup.addEventListener('mouseout', () => popupTimeout = setTimeout(() => popup.remove(), 600));
        }

        const buttonContainer = document.createElement('div');
        Object.assign(buttonContainer.style, {
             position: 'fixed', bottom: '10px', right: '10px', zIndex: '9999', display: 'flex', flexDirection: 'column', gap: '5px',
             opacity: '0', transition: 'opacity 0.3s ease'
        });
        document.body.appendChild(buttonContainer);
        buttonContainer.addEventListener('mouseover', () => buttonContainer.style.opacity = '1');
        buttonContainer.addEventListener('mouseout', () => buttonContainer.style.opacity = '0');


        const sButton = document.createElement('button');
        sButton.innerText = 'S';
        Object.assign(sButton.style, { padding: '8px', backgroundColor: 'rgba(0, 0, 0, 0.5)', color: '#fff', border: 'none', borderRadius: '5px', cursor: 'pointer' });
        sButton.onclick = function () {
            if (!scriptEnabled) return showPopup('Script is disabled by admin.');
            if (currentMode === 'custom') return showPopup(customAnswers.join('\n'));
            if (currentMode === 'real') return showPopup(answers.length > 0 ? answers.sort((a, b) => parseInt(a) - parseInt(b)).join('\n') : 'No answers found yet.');
        };
        buttonContainer.appendChild(sButton);


        const clearButton = document.createElement('button');
        clearButton.innerText = 'Clear';
        Object.assign(clearButton.style, { padding: '8px', backgroundColor: 'rgba(0, 0, 0, 0.5)', color: '#fff', border: 'none', borderRadius: '5px', cursor: 'pointer' });
        clearButton.onclick = function () {
            answers = [];
            showPopup('Answers cleared.');
        };
        buttonContainer.appendChild(clearButton);


        const originalFetch = window.fetch;
        window.fetch = function(...args) {
            if (scriptEnabled && currentMode === 'real') {
                return originalFetch.apply(this, args).then(async response => {
                    const clonedResponse = response.clone();
                    try { processQuestionData(await clonedResponse.json()); } catch (e) {}
                    return response;
                });
            }
            return originalFetch.apply(this, args);
        };
    }
})();
