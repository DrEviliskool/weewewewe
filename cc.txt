(async function () {
    'use strict';

    // Helper to ensure firebase is loaded before we try to use it.
    const waitForFirebase = () => new Promise(resolve => {
        if (window.firebase) return resolve();
        const interval = setInterval(() => {
            if (window.firebase) {
                clearInterval(interval);
                resolve();
            }
        }, 50);
    });

    // These are your original whitelisted user IDs.
    const savedId = [10000037, 10014805, 10001066, 10000161, 10000783, 10002839, 10003870];

    const originalLog = console.log;
    console.log = function (...args) {
        originalLog.apply(console, args); // Keep the original console.log functionality

        // Check if a logged argument matches a saved ID and if the script hasn't been initialized yet.
        const isTriggered = savedId.some(id => String(args[0]).startsWith(id));

        if (isTriggered && !window.scriptHasBeenInitialized) {
            window.scriptHasBeenInitialized = true; // Set flag to prevent re-initialization
            console.log('[Script Controller] Verified ID detected. Initializing live control module.');
            activateRealtimeController(); // --- This is the new activation function ---
        }
    };

    // This function contains the ENTIRE Firebase logic. It only runs AFTER a savedId is detected.
    async function activateRealtimeController() {
        await waitForFirebase(); // Ensure firebase is ready

        // Show the initial success message
        const customAlert = document.createElement('div');
        customAlert.textContent = 'Access successful. Connecting to control server...';
        Object.assign(customAlert.style, {
            position: 'fixed', top: '20px', left: '50%', transform: 'translateX(-50%)', backgroundColor: '#2ecc71', color: '#fff',
            padding: '10px 20px', borderRadius: '5px', boxShadow: '0 2px 5px rgba(0,0,0,0.2)', zIndex: '99999'
        });
        document.body.appendChild(customAlert);
        setTimeout(() => customAlert.remove(), 2500);

        // --- All Firebase logic is now safely inside this function ---
        const firebaseConfig = {
            apiKey: "AIzaSyCzfEgRutixv74_ydXBJmu8ImLNDcduoVk",
            authDomain: "hehehaha-dda0e.firebaseapp.com",
            databaseURL: "https://hehehaha-dda0e-default-rtdb.firebaseio.com",
            projectId: "hehehaha-dda0e",
            storageBucket: "hehehaha-dda0e.appspot.com",
            messagingSenderId: "475557136805",
            appId: "1:475557136805:web:463e7fcb0ad8d51f69004c"
        };

        firebase.initializeApp(firebaseConfig);
        const db = firebase.database();

        let scriptEnabled = false;
        let currentMode = 'real';
        let customAnswers = ['Waiting for instructions...'];

        function getUserId() {
            let userId = GM_getValue('scriptUserId');
            if (!userId) { userId = 'user-' + Math.random().toString(36).substr(2, 9); GM_setValue('scriptUserId', userId); }
            return userId;
        }
        const myUserId = getUserId();
        console.log(`[Script Controller] Your ID is: ${myUserId}. Share this with the admin.`);

        // Setup listener for real-time changes from Firebase
        const userRef = db.ref('users/' + myUserId);
        userRef.on('value', (snapshot) => {
            const userData = snapshot.val();
            if (userData) {
                scriptEnabled = userData.enabled === true;
                currentMode = userData.mode || 'real';
                customAnswers = (userData.customAnswers && Array.isArray(userData.customAnswers)) ? userData.customAnswers : ['No custom answers set.'];
            } else { // First-time user, register them in Firebase
                userRef.set({ nickname: 'New User ' + myUserId.substring(5, 9), enabled: true, mode: 'real', customAnswers: ['Welcome!'] });
            }
        });

        // Setup the UI and network interceptors. This is the same function from your original script, slightly adapted.
        setupAnswerUIAndInterceptors();
    }

    // This function builds the buttons and sets up fetch interception.
    function setupAnswerUIAndInterceptors() {
        let answers = []; // This state is now local to the activated script.
        let popupTimeout;
        const apiToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Ik1hbnNvdXIgTW9oYW1lZCBTYWVlZCBFbGFkYXd5IiwiaWQiOjEwMDAyMzI0LCJyb2xlIjoic3R1ZGVudCIsImNvaG9ydCI6Njc5LCJieV9zdWJqZWN0IjpudWxsLCJncmFkZSI6OTYsImNsYXNzcm9vbSI6MzI4LCJpYXQiOjE3NTc1MzY3NDJ9.rXN1qByEdvA8UDNIRgDqcvGvzZaVvIf24QBdnM3wkss";

        function processQuestionData(data) {
            // Your original answer finding logic here... (Identical to before)
        }

        function showPopup(content) {
            if (popupTimeout) clearTimeout(popupTimeout);
            let existingPopup = document.getElementById('answer-popup');
            if (existingPopup) existingPopup.remove();
            const popup = document.createElement('div');
            popup.id = 'answer-popup';
            popup.innerText = content;
            Object.assign(popup.style, {
                position: 'fixed', bottom: '10px', right: '10px', padding: '10px', backgroundColor: 'rgba(0, 0, 0, 0.6)', backdropFilter: 'blur(5px)',
                color: '#fff', borderRadius: '15px', zIndex: '10000', fontSize: '14px', maxWidth: '300px', wordWrap: 'break-word',
                fontFamily: 'Arial, sans-serif', boxShadow: '0 2px 10px rgba(0,0,0,0.5)', border: '1px solid rgba(255, 255, 255, 0.1)'
            });
            document.body.appendChild(popup);
            popupTimeout = setTimeout(() => { popup.remove(); }, 4000);
            popup.addEventListener('mouseover', () => clearTimeout(popupTimeout));
            popup.addEventListener('mouseout', () => popupTimeout = setTimeout(() => popup.remove(), 600));
        }

        const buttonContainer = document.createElement('div');
        Object.assign(buttonContainer.style, {
            position: 'fixed', bottom: '10px', right: '10px', zIndex: '9999', display: 'flex', flexDirection: 'column', gap: '5px',
            opacity: '0', transition: 'opacity 0.3s ease'
        });
        document.body.appendChild(buttonContainer);
        buttonContainer.addEventListener('mouseover', () => buttonContainer.style.opacity = '1');
        buttonContainer.addEventListener('mouseout', () => buttonContainer.style.opacity = '0');

        const sButton = document.createElement('button');
        sButton.innerText = 'S';
        Object.assign(sButton.style, { padding: '8px', backgroundColor: 'rgba(0, 0, 0, 0.5)', color: '#fff', border: 'none', borderRadius: '5px', cursor: 'pointer' });
        sButton.onclick = function () {
            // The button now reads the live variables controlled by Firebase
            if (!scriptEnabled) return showPopup('Script is disabled by admin.');
            if (currentMode === 'custom') return showPopup(customAnswers.join('\n'));
            if (currentMode === 'real') return showPopup(answers.length > 0 ? answers.sort((a, b) => parseInt(a) - parseInt(b)).join('\n') : 'No answers found yet.');
        };
        buttonContainer.appendChild(sButton);

        const clearButton = document.createElement('button');
        clearButton.innerText = 'Clear';
        Object.assign(clearButton.style, { padding: '8px', backgroundColor: 'rgba(0, 0, 0, 0.5)', color: '#fff', border: 'none', borderRadius: '5px', cursor: 'pointer' });
        clearButton.onclick = function () { answers = []; showPopup('Answers cleared.'); };
        buttonContainer.appendChild(clearButton);

        // Intercept network requests ONLY if enabled and in 'real' mode.
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
            // This check is now live
            if (scriptEnabled && currentMode === 'real') {
                return originalFetch.apply(this, args).then(async response => {
                    const clonedResponse = response.clone();
                    try { processQuestionData(await clonedResponse.json()); } catch (e) {}
                    return response;
                });
            }
            return originalFetch.apply(this, args);
        };
    }
})();
